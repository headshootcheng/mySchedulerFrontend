[{"C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\page\\auth.js":"1","C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\page\\auth\\register.js":"2","C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\page\\auth\\login.js":"3","C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\service\\auth.js":"4","C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\service\\user.js":"5"},{"size":1269,"mtime":1611138566056,"results":"6","hashOfConfig":"7"},{"size":3325,"mtime":1611139570868,"results":"8","hashOfConfig":"7"},{"size":2408,"mtime":1611138299593,"results":"9","hashOfConfig":"7"},{"size":1044,"mtime":1611138227759,"results":"10","hashOfConfig":"7"},{"size":288,"mtime":1611139892781,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mwr80l",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\page\\auth.js",[],"C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\page\\auth\\register.js",["22"],"C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\page\\auth\\login.js",[],"C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\service\\auth.js",[],"C:\\Users\\kkcheng\\Desktop\\Self-learning\\mySchedulerFrontend\\src\\service\\user.js",[],{"ruleId":"23","severity":1,"message":"24","line":15,"column":14,"nodeType":"25","endLine":18,"endColumn":5},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression"]